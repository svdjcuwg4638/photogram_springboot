package com.cos.photogramstart.service;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.Query;

// qlrm이란 데이터베이스에서 result된 결과를 자바클래스에 매핑을 해준다.
import org.qlrm.mapper.JpaResultMapper;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cos.photogramstart.domain.subscribe.SubscribeRepository;
import com.cos.photogramstart.handler.ex.CustomApiException;
import com.cos.photogramstart.web.dto.subscribe.SubscribeDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class SubscribeService {

	private final SubscribeRepository subscribeRepository;
	private final EntityManager em; // Repository는 EntityManager를 구현해서 만들어져 있는 구현체
	
	@Transactional(readOnly = true)
	public List<SubscribeDto> 구독리스트(int principalId, int pageUserId) {
		
		StringBuffer sb = new StringBuffer();
		sb.append("select u.id, u.username, u.profileImageUrl, "); // 마지막엔 띄어쓰기 해주기
		sb.append("if((select true from subscribe where fromUserId = ? AND toUserId = u.id),1,0) subscribeState, ");
		sb.append("if((? = u.id),1,0) equalUserState ");
		sb.append("from user u inner join subscribe s ");
		sb.append("on u.id = s.toUserId ");
		sb.append("where s.fromUserid = ? ");// 세키콜론 첨부하면 안됨
		
		// 2줄 ? principalId
		// 3줄 ? principalId
		// 6줄 ? pageUserId
		
		// import javaPersistence 
		Query query =em.createNativeQuery(sb.toString())
				.setParameter(1, principalId)
				.setParameter(2, principalId)
				.setParameter(3, pageUserId);
		// 위처럼 ? 자리에 값을 기입하는것을 바인딩이라고 한다.
		
		// 쿼리 실행
		JpaResultMapper result = new JpaResultMapper();
		List<SubscribeDto> subscribeDtos =  result.list(query, SubscribeDto.class);
		// 한건만 반화받을거면 uniqueResult함수사용
		// qlrm의존성이 알아서 매핑을 해준다
		
		return subscribeDtos;
	}
	
	@Transactional
	public void 구독하기(int fromUserId, int toUserId) {
		try {
			subscribeRepository.mSubscribe(fromUserId, toUserId);			
		}catch(Exception e) {
			throw new CustomApiException("이미 구독을 하였습니다.");
		}
	}
	
	@Transactional
	public void 구독취소하기(int fromUserId, int toUserId) {
		subscribeRepository.mUnSubscribe(fromUserId, toUserId);
		// 구독 취소하기는 해당하는 데이터가 없으면 에러가 안나서 필요가 없다.
	}


}
