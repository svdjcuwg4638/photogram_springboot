package com.cos.photogramstart.service;

import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.cos.photogramstart.domain.user.User;
import com.cos.photogramstart.domain.user.UserRepository;
import com.cos.photogramstart.handler.ex.CustomException;
import com.cos.photogramstart.handler.ex.CustomValidationApiException;
import com.cos.photogramstart.web.dto.user.UserProfileDto;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Service
public class UserService {

	private final UserRepository userRepository;
	private final BCryptPasswordEncoder bCryptPasswordEncoder;
	
	@Transactional(readOnly = true)
	public UserProfileDto 회원프로필(int pageUserId,int principalld) {
		UserProfileDto dto = new UserProfileDto();
		// select * from image where userid = :userId;
		User userEntity = userRepository.findById(pageUserId).orElseThrow(()->{
			throw new CustomException("해당 프로필 페이지는 없는 페이지입니다.");
		});
		
		dto.setUser(userEntity);
		dto.setPageOwner(pageUserId == principalld); // 1은 페이지 주인, -1은 주인이 아님
		
		return dto;
	}
	
	@Transactional
	public User 회원수정(int id,User user) {
		// 1. 영속화
		User userEntity = userRepository.findById(id).orElseThrow(()->{
			return new CustomValidationApiException("찾을 수 없는 id입니다.");
		}); 
		// 1) 무조건 찾았다 걱정마 get()
		// 2) 못찾았어 익섹션 발동시킬께 orElseThrow()
		userEntity.setName(user.getName());
		
		String rawPasString = user.getPassword();
		String encPassword = bCryptPasswordEncoder.encode(rawPasString);
		
		userEntity.setPassword(encPassword);
		userEntity.setBio(user.getBio());
		userEntity.setWebsite(user.getWebsite());
		userEntity.setPhone(user.getPhone());
		userEntity.setGender(user.getGender());
		
		// 2. 영속화된 오브젝트를 수정 - 더티체킹(업데이트 완료)
		return userEntity;
		// 더티체킹이 일어나서 업에이트가 완료됨.
	}
	
}
