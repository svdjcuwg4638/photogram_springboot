package com.cos.photogramstart.domain.user;

import java.time.LocalDateTime;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.PrePersist;

import com.cos.photogramstart.domain.image.Image;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

// JPA - Java Persistence API(자바로 데이터를 영구적으로 저장할 수 있는 API를 제공)
@Builder 
@AllArgsConstructor
@NoArgsConstructor
@Data
@Entity // 디비에 테이블 생성
public class User {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY) // 번호증가 전략이 데이터베이스를 따라간다
	private int id;
	// 원래는 id가 idx라 1번부터 시작하게 될건데 사용자가 1억유저라하면
	// long로 데이터타입을 잡는게 맞다 지금은 연습이니 int
	
	@Column(length=20 , unique  = true)
	private String username;
	@Column(nullable = false)
	private String password;
	@Column(nullable = false)
	private String name;
	private String website; // 웹 사이트
	private String bio; //자기소개
	@Column(nullable = false)
	private String email;
	private String phone;
	private String gender;
	
	private String profileimageUrl; // 사진
	private String role; //권한
	
//	 Lazy = User를 Select할 때 해당 User id로 등록된 image들을 가져오지마- 대신 getImages()함수의 image들이 호출될 때 가져와!!
//	 Eager = User를 Select할 때 해당 User id로 등록된 image들을 전부 Join해서 가져와
//	 나는 연관관계의 주인이 아니다. 그러므로 테이블에 만들지마
//	 User를 Select할 때 해당 User id로 등록된 image들을 다 가져와\
	@OneToMany(mappedBy = "user", fetch = FetchType.LAZY) 
	@JsonIgnoreProperties("{user}")
	private List<Image> images;
	
	private LocalDateTime createDate;
	
	@PrePersist
	public void createDate() {
		this.createDate =  LocalDateTime.now();
	}	
	
	
}
